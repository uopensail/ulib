// Code generated from uno.g4 by ANTLR 4.13.2. DO NOT EDIT.

package uno

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type unoLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var UnoLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func unolexerLexerInit() {
	staticData := &UnoLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'('", "')'", "'['", "']'", "'.'", "','", "'\"'", "'+'", "'-'",
		"'*'", "'/'", "'%'", "'on'", "'and'", "'or'", "'not'", "'in'", "'true'",
		"'false'", "", "'='", "'=='", "'<>'", "'!='", "'>'", "'>='", "'<'",
		"'<='",
	}
	staticData.SymbolicNames = []string{
		"", "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE",
		"DOT", "COMMA", "QUOTA", "T_ADD", "T_SUB", "T_MUL", "T_DIV", "T_MOD",
		"T_ON", "T_AND", "T_OR", "T_NOT", "T_IN", "T_TRUE", "T_FALSE", "T_COMPARE",
		"T_EQUAL", "T_EQUAL2", "T_NOTEQUAL", "T_NOTEQUAL2", "T_GREATER", "T_GREATEREQUAL",
		"T_LESS", "T_LESSEQUAL", "IDENTIFIER", "INTEGER_LIST", "INTEGER", "DECIMAL_LIST",
		"DECIMAL", "STRING_LIST", "STRING", "WS",
	}
	staticData.RuleNames = []string{
		"BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "DOT",
		"COMMA", "QUOTA", "T_ADD", "T_SUB", "T_MUL", "T_DIV", "T_MOD", "T_ON",
		"T_AND", "T_OR", "T_NOT", "T_IN", "T_TRUE", "T_FALSE", "T_COMPARE",
		"T_EQUAL", "T_EQUAL2", "T_NOTEQUAL", "T_NOTEQUAL2", "T_GREATER", "T_GREATEREQUAL",
		"T_LESS", "T_LESSEQUAL", "IDENTIFIER", "INTEGER_LIST", "INTEGER", "DECIMAL_LIST",
		"DECIMAL", "STRING_LIST", "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT",
		"WS",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 36, 272, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 1, 0, 1, 0, 1, 1, 1, 1,
		1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7,
		1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 3, 19, 142, 8, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22,
		1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1,
		26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 5, 28, 167, 8, 28, 10, 28,
		12, 28, 170, 9, 28, 1, 29, 1, 29, 1, 29, 1, 29, 5, 29, 176, 8, 29, 10,
		29, 12, 29, 179, 9, 29, 1, 29, 1, 29, 1, 29, 1, 30, 3, 30, 185, 8, 30,
		1, 30, 1, 30, 1, 30, 5, 30, 190, 8, 30, 10, 30, 12, 30, 193, 9, 30, 3,
		30, 195, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 201, 8, 31, 10, 31,
		12, 31, 204, 9, 31, 1, 31, 1, 31, 1, 31, 1, 32, 3, 32, 210, 8, 32, 1, 32,
		1, 32, 1, 32, 5, 32, 215, 8, 32, 10, 32, 12, 32, 218, 9, 32, 3, 32, 220,
		8, 32, 1, 32, 1, 32, 5, 32, 224, 8, 32, 10, 32, 12, 32, 227, 9, 32, 1,
		33, 1, 33, 1, 33, 1, 33, 5, 33, 233, 8, 33, 10, 33, 12, 33, 236, 9, 33,
		1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 5, 34, 244, 8, 34, 10, 34, 12,
		34, 247, 9, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 3, 35, 254, 8, 35, 1,
		36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39,
		4, 39, 267, 8, 39, 11, 39, 12, 39, 268, 1, 39, 1, 39, 0, 0, 40, 1, 1, 3,
		2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12,
		25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21,
		43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30,
		61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 0, 73, 0, 75, 0, 77, 0, 79,
		36, 1, 0, 20, 2, 0, 79, 79, 111, 111, 2, 0, 78, 78, 110, 110, 2, 0, 65,
		65, 97, 97, 2, 0, 68, 68, 100, 100, 2, 0, 82, 82, 114, 114, 2, 0, 84, 84,
		116, 116, 2, 0, 73, 73, 105, 105, 2, 0, 85, 85, 117, 117, 2, 0, 69, 69,
		101, 101, 2, 0, 70, 70, 102, 102, 2, 0, 76, 76, 108, 108, 2, 0, 83, 83,
		115, 115, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95,
		97, 122, 1, 0, 49, 57, 1, 0, 48, 57, 13, 0, 34, 34, 47, 47, 66, 66, 70,
		70, 78, 78, 82, 82, 84, 84, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114,
		116, 116, 3, 0, 48, 57, 65, 70, 97, 102, 3, 0, 0, 31, 34, 34, 92, 92, 3,
		0, 9, 10, 13, 13, 32, 32, 289, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5,
		1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13,
		1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0,
		21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0,
		0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0,
		0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0,
		0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1,
		0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59,
		1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0,
		67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 1, 81, 1, 0, 0, 0,
		3, 83, 1, 0, 0, 0, 5, 85, 1, 0, 0, 0, 7, 87, 1, 0, 0, 0, 9, 89, 1, 0, 0,
		0, 11, 91, 1, 0, 0, 0, 13, 93, 1, 0, 0, 0, 15, 95, 1, 0, 0, 0, 17, 97,
		1, 0, 0, 0, 19, 99, 1, 0, 0, 0, 21, 101, 1, 0, 0, 0, 23, 103, 1, 0, 0,
		0, 25, 105, 1, 0, 0, 0, 27, 108, 1, 0, 0, 0, 29, 112, 1, 0, 0, 0, 31, 115,
		1, 0, 0, 0, 33, 119, 1, 0, 0, 0, 35, 122, 1, 0, 0, 0, 37, 127, 1, 0, 0,
		0, 39, 141, 1, 0, 0, 0, 41, 143, 1, 0, 0, 0, 43, 145, 1, 0, 0, 0, 45, 148,
		1, 0, 0, 0, 47, 151, 1, 0, 0, 0, 49, 154, 1, 0, 0, 0, 51, 156, 1, 0, 0,
		0, 53, 159, 1, 0, 0, 0, 55, 161, 1, 0, 0, 0, 57, 164, 1, 0, 0, 0, 59, 171,
		1, 0, 0, 0, 61, 194, 1, 0, 0, 0, 63, 196, 1, 0, 0, 0, 65, 209, 1, 0, 0,
		0, 67, 228, 1, 0, 0, 0, 69, 240, 1, 0, 0, 0, 71, 250, 1, 0, 0, 0, 73, 255,
		1, 0, 0, 0, 75, 261, 1, 0, 0, 0, 77, 263, 1, 0, 0, 0, 79, 266, 1, 0, 0,
		0, 81, 82, 5, 40, 0, 0, 82, 2, 1, 0, 0, 0, 83, 84, 5, 41, 0, 0, 84, 4,
		1, 0, 0, 0, 85, 86, 5, 91, 0, 0, 86, 6, 1, 0, 0, 0, 87, 88, 5, 93, 0, 0,
		88, 8, 1, 0, 0, 0, 89, 90, 5, 46, 0, 0, 90, 10, 1, 0, 0, 0, 91, 92, 5,
		44, 0, 0, 92, 12, 1, 0, 0, 0, 93, 94, 5, 34, 0, 0, 94, 14, 1, 0, 0, 0,
		95, 96, 5, 43, 0, 0, 96, 16, 1, 0, 0, 0, 97, 98, 5, 45, 0, 0, 98, 18, 1,
		0, 0, 0, 99, 100, 5, 42, 0, 0, 100, 20, 1, 0, 0, 0, 101, 102, 5, 47, 0,
		0, 102, 22, 1, 0, 0, 0, 103, 104, 5, 37, 0, 0, 104, 24, 1, 0, 0, 0, 105,
		106, 7, 0, 0, 0, 106, 107, 7, 1, 0, 0, 107, 26, 1, 0, 0, 0, 108, 109, 7,
		2, 0, 0, 109, 110, 7, 1, 0, 0, 110, 111, 7, 3, 0, 0, 111, 28, 1, 0, 0,
		0, 112, 113, 7, 0, 0, 0, 113, 114, 7, 4, 0, 0, 114, 30, 1, 0, 0, 0, 115,
		116, 7, 1, 0, 0, 116, 117, 7, 0, 0, 0, 117, 118, 7, 5, 0, 0, 118, 32, 1,
		0, 0, 0, 119, 120, 7, 6, 0, 0, 120, 121, 7, 1, 0, 0, 121, 34, 1, 0, 0,
		0, 122, 123, 7, 5, 0, 0, 123, 124, 7, 4, 0, 0, 124, 125, 7, 7, 0, 0, 125,
		126, 7, 8, 0, 0, 126, 36, 1, 0, 0, 0, 127, 128, 7, 9, 0, 0, 128, 129, 7,
		2, 0, 0, 129, 130, 7, 10, 0, 0, 130, 131, 7, 11, 0, 0, 131, 132, 7, 8,
		0, 0, 132, 38, 1, 0, 0, 0, 133, 142, 3, 41, 20, 0, 134, 142, 3, 43, 21,
		0, 135, 142, 3, 45, 22, 0, 136, 142, 3, 47, 23, 0, 137, 142, 3, 49, 24,
		0, 138, 142, 3, 51, 25, 0, 139, 142, 3, 53, 26, 0, 140, 142, 3, 55, 27,
		0, 141, 133, 1, 0, 0, 0, 141, 134, 1, 0, 0, 0, 141, 135, 1, 0, 0, 0, 141,
		136, 1, 0, 0, 0, 141, 137, 1, 0, 0, 0, 141, 138, 1, 0, 0, 0, 141, 139,
		1, 0, 0, 0, 141, 140, 1, 0, 0, 0, 142, 40, 1, 0, 0, 0, 143, 144, 5, 61,
		0, 0, 144, 42, 1, 0, 0, 0, 145, 146, 5, 61, 0, 0, 146, 147, 5, 61, 0, 0,
		147, 44, 1, 0, 0, 0, 148, 149, 5, 60, 0, 0, 149, 150, 5, 62, 0, 0, 150,
		46, 1, 0, 0, 0, 151, 152, 5, 33, 0, 0, 152, 153, 5, 61, 0, 0, 153, 48,
		1, 0, 0, 0, 154, 155, 5, 62, 0, 0, 155, 50, 1, 0, 0, 0, 156, 157, 5, 62,
		0, 0, 157, 158, 5, 61, 0, 0, 158, 52, 1, 0, 0, 0, 159, 160, 5, 60, 0, 0,
		160, 54, 1, 0, 0, 0, 161, 162, 5, 60, 0, 0, 162, 163, 5, 61, 0, 0, 163,
		56, 1, 0, 0, 0, 164, 168, 7, 12, 0, 0, 165, 167, 7, 13, 0, 0, 166, 165,
		1, 0, 0, 0, 167, 170, 1, 0, 0, 0, 168, 166, 1, 0, 0, 0, 168, 169, 1, 0,
		0, 0, 169, 58, 1, 0, 0, 0, 170, 168, 1, 0, 0, 0, 171, 177, 3, 1, 0, 0,
		172, 173, 3, 61, 30, 0, 173, 174, 3, 11, 5, 0, 174, 176, 1, 0, 0, 0, 175,
		172, 1, 0, 0, 0, 176, 179, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 177, 178,
		1, 0, 0, 0, 178, 180, 1, 0, 0, 0, 179, 177, 1, 0, 0, 0, 180, 181, 3, 61,
		30, 0, 181, 182, 3, 3, 1, 0, 182, 60, 1, 0, 0, 0, 183, 185, 5, 45, 0, 0,
		184, 183, 1, 0, 0, 0, 184, 185, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186,
		195, 5, 48, 0, 0, 187, 191, 7, 14, 0, 0, 188, 190, 7, 15, 0, 0, 189, 188,
		1, 0, 0, 0, 190, 193, 1, 0, 0, 0, 191, 189, 1, 0, 0, 0, 191, 192, 1, 0,
		0, 0, 192, 195, 1, 0, 0, 0, 193, 191, 1, 0, 0, 0, 194, 184, 1, 0, 0, 0,
		194, 187, 1, 0, 0, 0, 195, 62, 1, 0, 0, 0, 196, 202, 3, 1, 0, 0, 197, 198,
		3, 65, 32, 0, 198, 199, 3, 11, 5, 0, 199, 201, 1, 0, 0, 0, 200, 197, 1,
		0, 0, 0, 201, 204, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 202, 203, 1, 0, 0,
		0, 203, 205, 1, 0, 0, 0, 204, 202, 1, 0, 0, 0, 205, 206, 3, 65, 32, 0,
		206, 207, 3, 3, 1, 0, 207, 64, 1, 0, 0, 0, 208, 210, 5, 45, 0, 0, 209,
		208, 1, 0, 0, 0, 209, 210, 1, 0, 0, 0, 210, 219, 1, 0, 0, 0, 211, 220,
		5, 48, 0, 0, 212, 216, 7, 14, 0, 0, 213, 215, 7, 15, 0, 0, 214, 213, 1,
		0, 0, 0, 215, 218, 1, 0, 0, 0, 216, 214, 1, 0, 0, 0, 216, 217, 1, 0, 0,
		0, 217, 220, 1, 0, 0, 0, 218, 216, 1, 0, 0, 0, 219, 211, 1, 0, 0, 0, 219,
		212, 1, 0, 0, 0, 220, 221, 1, 0, 0, 0, 221, 225, 5, 46, 0, 0, 222, 224,
		7, 15, 0, 0, 223, 222, 1, 0, 0, 0, 224, 227, 1, 0, 0, 0, 225, 223, 1, 0,
		0, 0, 225, 226, 1, 0, 0, 0, 226, 66, 1, 0, 0, 0, 227, 225, 1, 0, 0, 0,
		228, 234, 3, 1, 0, 0, 229, 230, 3, 69, 34, 0, 230, 231, 3, 11, 5, 0, 231,
		233, 1, 0, 0, 0, 232, 229, 1, 0, 0, 0, 233, 236, 1, 0, 0, 0, 234, 232,
		1, 0, 0, 0, 234, 235, 1, 0, 0, 0, 235, 237, 1, 0, 0, 0, 236, 234, 1, 0,
		0, 0, 237, 238, 3, 69, 34, 0, 238, 239, 3, 3, 1, 0, 239, 68, 1, 0, 0, 0,
		240, 245, 3, 13, 6, 0, 241, 244, 3, 71, 35, 0, 242, 244, 3, 77, 38, 0,
		243, 241, 1, 0, 0, 0, 243, 242, 1, 0, 0, 0, 244, 247, 1, 0, 0, 0, 245,
		243, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 248, 1, 0, 0, 0, 247, 245,
		1, 0, 0, 0, 248, 249, 3, 13, 6, 0, 249, 70, 1, 0, 0, 0, 250, 253, 5, 92,
		0, 0, 251, 254, 7, 16, 0, 0, 252, 254, 3, 73, 36, 0, 253, 251, 1, 0, 0,
		0, 253, 252, 1, 0, 0, 0, 254, 72, 1, 0, 0, 0, 255, 256, 7, 7, 0, 0, 256,
		257, 3, 75, 37, 0, 257, 258, 3, 75, 37, 0, 258, 259, 3, 75, 37, 0, 259,
		260, 3, 75, 37, 0, 260, 74, 1, 0, 0, 0, 261, 262, 7, 17, 0, 0, 262, 76,
		1, 0, 0, 0, 263, 264, 8, 18, 0, 0, 264, 78, 1, 0, 0, 0, 265, 267, 7, 19,
		0, 0, 266, 265, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 266, 1, 0, 0, 0,
		268, 269, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 271, 6, 39, 0, 0, 271,
		80, 1, 0, 0, 0, 17, 0, 141, 168, 177, 184, 191, 194, 202, 209, 216, 219,
		225, 234, 243, 245, 253, 268, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// unoLexerInit initializes any static state used to implement unoLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewunoLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func UnoLexerInit() {
	staticData := &UnoLexerLexerStaticData
	staticData.once.Do(unolexerLexerInit)
}

// NewunoLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewunoLexer(input antlr.CharStream) *unoLexer {
	UnoLexerInit()
	l := new(unoLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &UnoLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "uno.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// unoLexer tokens.
const (
	unoLexerBRACKET_OPEN   = 1
	unoLexerBRACKET_CLOSE  = 2
	unoLexerSQUARE_OPEN    = 3
	unoLexerSQUARE_CLOSE   = 4
	unoLexerDOT            = 5
	unoLexerCOMMA          = 6
	unoLexerQUOTA          = 7
	unoLexerT_ADD          = 8
	unoLexerT_SUB          = 9
	unoLexerT_MUL          = 10
	unoLexerT_DIV          = 11
	unoLexerT_MOD          = 12
	unoLexerT_ON           = 13
	unoLexerT_AND          = 14
	unoLexerT_OR           = 15
	unoLexerT_NOT          = 16
	unoLexerT_IN           = 17
	unoLexerT_TRUE         = 18
	unoLexerT_FALSE        = 19
	unoLexerT_COMPARE      = 20
	unoLexerT_EQUAL        = 21
	unoLexerT_EQUAL2       = 22
	unoLexerT_NOTEQUAL     = 23
	unoLexerT_NOTEQUAL2    = 24
	unoLexerT_GREATER      = 25
	unoLexerT_GREATEREQUAL = 26
	unoLexerT_LESS         = 27
	unoLexerT_LESSEQUAL    = 28
	unoLexerIDENTIFIER     = 29
	unoLexerINTEGER_LIST   = 30
	unoLexerINTEGER        = 31
	unoLexerDECIMAL_LIST   = 32
	unoLexerDECIMAL        = 33
	unoLexerSTRING_LIST    = 34
	unoLexerSTRING         = 35
	unoLexerWS             = 36
)
